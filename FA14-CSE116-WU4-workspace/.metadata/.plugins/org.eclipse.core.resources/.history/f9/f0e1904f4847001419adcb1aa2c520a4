package tests;

import static org.junit.Assert.assertTrue;

import javax.swing.JLabel;

import org.junit.Test;

import code.WriteUp;

public class WriteUpTests {

	@Test public void test00() {
		int[][] a = {{1}};
		int[][] exp = {{1}};
		int[][] act = new WriteUp<String>().solution(a);
		assertTrue("For input \n"+toString(a)+" the expected answer was \n"+toString(exp)+"but actual answer was \n"+toString(act),matrixEq(exp,act));
	}

	@Test public void test01() {
		int[][] a = {{1,2}};
		int[][] exp = {{1},{2}};
		int[][] act = new WriteUp<String>().solution(a);
		assertTrue("For input \n"+toString(a)+" the expected answer was \n"+toString(exp)+"but actual answer was \n"+toString(act),matrixEq(exp,act));
	}

	@Test public void test02() {
		int[][] a = {{1}};
		int[][] exp = {{1}};
		int[][] act = new WriteUp<String>().solution(a);
		assertTrue("For input \n"+toString(a)+" the expected answer was \n"+toString(exp)+"but actual answer was \n"+toString(act),matrixEq(exp,act));
	}

	@Test public void test03() {
		int[][] a = {{1}};
		int[][] exp = {{1}};
		int[][] act = new WriteUp<String>().solution(a);
		assertTrue("For input \n"+toString(a)+" the expected answer was \n"+toString(exp)+"but actual answer was \n"+toString(act),matrixEq(exp,act));
	}

	@Test public void test04() {
		int[][] a = {{1}};
		int[][] exp = {{1}};
		int[][] act = new WriteUp<String>().solution(a);
		assertTrue("For input \n"+toString(a)+" the expected answer was \n"+toString(exp)+"but actual answer was \n"+toString(act),matrixEq(exp,act));
	}

	private String toString(int[][] a) {
		StringBuffer sb = new StringBuffer();
		sb.append("[ ");
		for (int i=0; i<a.length; i++) {
			sb.append("[ ");
			for(int j=0; j<a[i].length; j++) {
				sb.append(a[i][j]+" ");
			}
			sb.append("]\n");
		}
		sb.append("]\n");
		return sb.toString();
	}

	
	private boolean matrixEq(int[][] exp, int[][] act) {
		if (exp.length != act.length) {
			return false;
		}
		for (int i=0; i<exp.length; i++) {
			if (exp[i].length != act[i].length) {
				return false;
			}
			for(int j=0; j<exp[i].length; j++) {
				if ( exp[i][j] != act[i][j] ) {
					return false;
				}
			}
		}
		return true;
	}

}
